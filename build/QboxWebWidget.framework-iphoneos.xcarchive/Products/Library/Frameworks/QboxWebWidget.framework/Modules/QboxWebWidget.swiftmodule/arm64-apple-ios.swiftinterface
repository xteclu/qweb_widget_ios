// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QboxWebWidget
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreTelephony
import Foundation
@_exported import QboxWebWidget
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum Language : Swift.String {
  case ru, kk, en
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class Settings {
  public init(url: Swift.String, language: QboxWebWidget.Language, call: QboxWebWidget.Call? = nil, user: QboxWebWidget.User? = nil, device: QboxWebWidget.Device? = nil, loggingEnabled: Swift.Bool? = nil)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public struct Location {
  public init(latitude: Swift.Double, longitude: Swift.Double)
}
public enum CallType : Swift.String {
  case video, audio
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Call {
  public init(domain: Swift.String, type: QboxWebWidget.CallType, topic: Swift.String, location: QboxWebWidget.Location? = nil, dynamicAttrs: [Swift.String : Any?] = [:])
}
public struct DeviceBattery {
  public init(batteryLevelPercentage: Swift.Int? = nil, batteryIsCharging: Swift.Bool? = nil)
}
public struct Device {
  public init(systemName: Swift.String? = nil, systemVersion: Swift.String? = nil, modelName: Swift.String? = nil, mobileOperator: Swift.String? = nil, appVersion: Swift.String? = nil, battery: QboxWebWidget.DeviceBattery? = nil)
}
public struct User {
  public init(id: Swift.Int? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, patronymic: Swift.String? = nil, birthDate: Foundation.Date? = nil, iin: Swift.String? = nil, phoneNumber: Swift.String? = nil, dynamicAttrs: [Swift.String : Any?] = [:])
}
@objc @_Concurrency.MainActor(unsafe) open class WebViewController : UIKit.UIViewController, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, SafariServices.SFSafariViewControllerDelegate {
  @available(iOS 15.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public init(settings: QboxWebWidget.Settings)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func reloadPage()
  @_Concurrency.MainActor(unsafe) public func clearCache(completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc open func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc open func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
extension QboxWebWidget.Language : Swift.Equatable {}
extension QboxWebWidget.Language : Swift.Hashable {}
extension QboxWebWidget.Language : Swift.RawRepresentable {}
extension QboxWebWidget.CallType : Swift.Equatable {}
extension QboxWebWidget.CallType : Swift.Hashable {}
extension QboxWebWidget.CallType : Swift.RawRepresentable {}
